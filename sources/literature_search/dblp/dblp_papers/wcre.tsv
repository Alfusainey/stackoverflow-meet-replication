Automated construction of a software-specific word similarity database.	Yuan Tian, David Lo, Julia Lawall	csmr2014	Many automated software engineering approaches, including code search, bug report categorization, and duplicate bug report detection, measure similarities between two documents by analyzing natural language contents. Often different words are used to express the same meaning and thus measuring similarities using exact matching of words is insufficient. To solve this problem, past studies have shown the need to measure the similarities between pairs of words. To meet this need, the natural language processing community has built WordNet which is a manually constructed lexical database that records semantic relations among words and can be used to measure how similar two words are. However, WordNet is a general purpose resource, and often does not contain software-specific words. Also, the meanings of words in WordNet are often different than when they are used in software engineering context. Thus, there is a need for a software-specific WordNet-like resource that can measure similarities of words. In this work, we propose an automated approach that builds a software-specific WordNet like resource, named WordSimSEDB, by leveraging the textual contents of posts in StackOverflow. Our approach measures the similarity of words by computing the similarities of the weighted co-occurrences of these words with three types of words in the textual corpus. We have evaluated our approach on a set of software-specific words and compared our approach with an existing WordNet-based technique (WordNetres) to return top-k most similar words. Human judges are used to evaluate the effectiveness of the two techniques. We find that WordNetres returns no result for 55 % of the queries. For the remaining queries, WordNetres returns significantly poorer results.
Towards a context-aware IDE-based meta search engine for recommendation about programming errors and exceptions.	Mohammad Masudur Rahman, Shamima Yeasmin, Chanchal K. Roy	csmr2014	Study shows that software developers spend about 19% of their time looking for information in the web during software development and maintenance. Traditional web search forces them to leave the working environment (e.g., IDE) and look for information in the web browser. It also does not consider the context of the problems that the developers search solutions for. The frequent switching between web browser and the IDE is both time-consuming and distracting, and the keyword-based traditional web search often does not help much in problem solving. In this paper, we propose an Eclipse IDE-based web search solution that exploits the APIs provided by three popular web search engines-Google, Yahoo, Bing and a popular programming Q & A site, StackOverflow, and captures the content-relevance, context-relevance, popularity and search engine confidence of each candidate result against the encountered programming problems. Experiments with 75 programming errors and exceptions using the proposed approach show that inclusion of different types of contextual information associated with a given exception can enhance the recommendation accuracy of a given exception. Experiments both with two existing approaches and existing web search engines confirm that our approach can perform better than them in terms of recall, mean precision and other performance measures with little computational cost.
An IDE-based context-aware meta search engine.	Mohammad Masudur Rahman, Shamima Yeasmin, Chanchal K. Roy	wcre2013	Traditional web search forces the developers to leave their working environments and look for solutions in the web browsers. It often does not consider the context of their programming problems. The context-switching between the web browser and the working environment is time-consuming and distracting, and the keyword-based traditional search often does not help much in problem solving. In this paper, we propose an Eclipse IDE-based web search solution that collects the data from three web search APIs-Google, Yahoo, Bing and a programming Q & A site-StackOverflow. It then provides search results within IDE taking not only the content of the selected error into account but also the problem context, popularity and search engine recommendation of the result links. Experiments with 25 runtime errors and exceptions show that the proposed approach outperforms the keyword-based search approaches with a recommendation accuracy of 96%. We also validate the results with a user study involving five prospective participants where we get a result agreement of 64.28%. While the preliminary results are promising, the approach needs to be further validated with more errors and exceptions followed by a user study with more participants to establish itself as a complete IDE-based web search solution.
Beyond the Lone Reverse Engineer: Insourcing, Outsourcing and Crowdsourcing.	Margaret-Anne D. Storey	wcre2009	When one imagines a reverse engineer at work, an image that often comes to mind is that of a lone engineer using advanced tools to help in design recovery. However, in practice the engineer may be part of a team that has to tackle the arduous task of documenting a system's design. Often, such a team will be distributed and may have to work in an asynchronous manner. Moreover, sharing and combining knowledge will transient or non-team members further adds to the complexity of the task. These collaboration challenges are seldom discussed or even mentioned in the research literature. In this talk, I will explore how models, theories and technologies from the disciplines of computer supported cooperative work and social computing can improve and encourage collaboration in reverse engineering. I will briefly present several success stories on how social computing technologies have helped improve how small teams, distributed larger teams and the crowd tackle complex intellectual tasks in other areas of science. I will also describe some of our early work investigating how Web 2.0 social computing technologies, such as tagging and feeds facilitate collaborative software engineering. My hope is that these stories may spark ideas on how social computing might inspire new research in reverse engineering.
